/**
 * LacusSoft :: cpf-gen v1.2.0
 *
 * @author Julio L. Muller.
 * @license MIT - 2020-2021
 */

'use strict';

var numOnly = require('num-only');
var cpfFmt = require('@lacussoft/cpf-fmt');
var mergeDeep = require('deepmerge');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var numOnly__default = /*#__PURE__*/_interopDefaultLegacy(numOnly);
var cpfFmt__default = /*#__PURE__*/_interopDefaultLegacy(cpfFmt);
var mergeDeep__default = /*#__PURE__*/_interopDefaultLegacy(mergeDeep);

var defaultOptions = {
    format: false,
    prefix: '',
};
/**
 * Merge custom options to the default ones.
 */
function mergeOptions(customOptions) {
    if (customOptions === void 0) { customOptions = {}; }
    return mergeDeep__default['default'](defaultOptions, customOptions);
}

/**
 * Generate an array of random numbers (as string) between 0 and  9.
 */
function numberGenerator(length) {
    var numericSequence = [];
    while (numericSequence.length < length) {
        var random = Math.random() * 10;
        var integer = Math.floor(random);
        numericSequence.push(integer);
    }
    return numericSequence;
}

/**
 * Generate a valid CPF (Brazilian ID document) numeric sequence.
 */
function cpfGen(options) {
    var userOptions = mergeOptions(options);
    var baseSequence = numOnly__default['default'](userOptions.prefix);
    var prefixLength = baseSequence.length;
    if (prefixLength < 0 || prefixLength > 9) {
        throw new Error('Option "prefix" must be a string containing between 1 and 9 digits.');
    }
    var cpfSequence = baseSequence
        .split('')
        .map(Number)
        .concat(numberGenerator(9 - prefixLength));
    [9, 10].forEach(function (nextNumIndex) {
        var factor = nextNumIndex + 1;
        var sum = 0;
        for (var n = 0; n < nextNumIndex; n++, factor--) {
            sum += cpfSequence[n] * factor;
        }
        var remainder = 11 - (sum % 11);
        cpfSequence.push(remainder > 9 ? 0 : remainder);
    });
    return userOptions.format
        ? cpfFmt__default['default'](cpfSequence.join(''))
        : cpfSequence.join('');
}

module.exports = cpfGen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY2pzLmpzIiwic291cmNlcyI6W10sInNvdXJjZXNDb250ZW50IjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
