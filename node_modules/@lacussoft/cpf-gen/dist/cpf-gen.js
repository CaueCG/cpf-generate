/**
 * LacusSoft :: cpf-gen v1.2.0
 *
 * @author Julio L. Muller.
 * @license MIT - 2020-2021
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.cpfGen = factory());
}(this, (function () { 'use strict';

    /**
     * num-only v1.1.0
     *
     * @author Julio L. Muller.
     * @license MIT - 2020-2021
     */

    function numOnly$1(target) {
      return String(target).replace(/\D/g, '');
    }

    var index_cjs$1 = numOnly$1;

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function (obj) {
          return typeof obj;
        };
      } else {
        _typeof = function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    var cjs$1 = {};

    /**
     * Copyright (C) 2017-present by Andrea Giammarchi - @WebReflection
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */


    var _ref = '',
        replace = _ref.replace; // escape

    var es = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34);/g;
    var ca = /[&<>'"]/g;
    var esca = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      "'": '&#39;',
      '"': '&quot;'
    };

    var pe = function pe(m) {
      return esca[m];
    };
    /**
     * Safely escape HTML entities such as `&`, `<`, `>`, `"`, and `'`.
     * @param {string} es the input to safely escape
     * @returns {string} the escaped input, and it **throws** an error if
     *  the input type is unexpected, except for boolean and numbers,
     *  converted as string.
     */


    var escape = function escape(es) {
      return replace.call(es, ca, pe);
    };

    cjs$1.escape = escape; // unescape


    var unes = {
      '&amp;': '&',
      '&#38;': '&',
      '&lt;': '<',
      '&#60;': '<',
      '&gt;': '>',
      '&#62;': '>',
      '&apos;': "'",
      '&#39;': "'",
      '&quot;': '"',
      '&#34;': '"'
    };

    var cape = function cape(m) {
      return unes[m];
    };
    /**
     * Safely unescape previously escaped entities such as `&`, `<`, `>`, `"`,
     * and `'`.
     * @param {string} un a previously escaped string
     * @returns {string} the unescaped input, and it **throws** an error if
     *  the input type is unexpected, except for boolean and numbers,
     *  converted as string.
     */


    var unescape = function unescape(un) {
      return replace.call(un, es, cape);
    };

    cjs$1.unescape = unescape;

    var isMergeableObject = function isMergeableObject(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };

    function isNonNullObject(value) {
      return !!value && _typeof(value) === 'object';
    }

    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
    } // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25


    var canUseSymbol = typeof Symbol === 'function' && Symbol["for"];
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol["for"]('react.element') : 0xeac7;

    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }

    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }

    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }

    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function (element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }

    function getMergeFunction(key, options) {
      if (!options.customMerge) {
        return deepmerge;
      }

      var customMerge = options.customMerge(key);
      return typeof customMerge === 'function' ? customMerge : deepmerge;
    }

    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {
        return target.propertyIsEnumerable(symbol);
      }) : [];
    }

    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }

    function propertyIsOnObject(object, property) {
      try {
        return property in object;
      } catch (_) {
        return false;
      }
    } // Protects from prototype poisoning and unexpected merging up the prototype chain.


    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
      && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
      && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.
    }

    function mergeObject(target, source, options) {
      var destination = {};

      if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function (key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }

      getKeys(source).forEach(function (key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }

        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
          destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        }
      });
      return destination;
    }

    function deepmerge(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject; // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
      // implementations can use it. The caller may not replace it.

      options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }

    deepmerge.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error('first argument should be an array');
      }

      return array.reduce(function (prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };

    var deepmerge_1 = deepmerge;
    var cjs = deepmerge_1;

    var numOnly = index_cjs$1;
    var htmlEscaper = cjs$1;
    var mergeDeep = cjs;

    function _interopDefaultLegacy$1(e) {
      return e && _typeof(e) === 'object' && 'default' in e ? e : {
        'default': e
      };
    }

    var numOnly__default = /*#__PURE__*/_interopDefaultLegacy$1(numOnly);

    var mergeDeep__default = /*#__PURE__*/_interopDefaultLegacy$1(mergeDeep);

    var defaultOptions$1 = {
      delimiters: {
        dot: '.',
        dash: '-'
      },
      hiddenRange: {
        start: 3,
        end: 10
      },
      onFail: function onFail(value) {
        return value;
      },
      hiddenKey: '*',
      hidden: false,
      escape: false
    };
    /**
     * Merge custom options to the default ones.
     */

    function mergeOptions$1(customOptions) {
      if (customOptions === void 0) {
        customOptions = {};
      }

      var options = mergeDeep__default['default'](defaultOptions$1, customOptions);

      if (options.hidden) {
        if (isNaN(options.hiddenRange.start) || options.hiddenRange.start < 0 || options.hiddenRange.start > 10) {
          throw new TypeError('Option "hiddenRange.start" must be a number between 0 and 10.');
        }

        if (isNaN(options.hiddenRange.end) || options.hiddenRange.end < 0 || options.hiddenRange.end > 10) {
          throw new TypeError('Option "hiddenRange.end" must be a number between 0 and 10.');
        }

        if (options.hiddenRange.start > options.hiddenRange.end) {
          var aux = options.hiddenRange.start;
          options.hiddenRange.start = options.hiddenRange.end;
          options.hiddenRange.end = aux;
        }
      }

      if (typeof options.onFail !== 'function') {
        throw new TypeError('The option "onFail" must be a callback function.');
      }

      return options;
    }
    /**
     * Validate a given CPF char sequence.
     */


    function cpfFmt(cpfString, options) {
      var CPF_LENGTH = 11;
      var cpfArray = numOnly__default['default'](cpfString).split('');
      var customOptions = mergeOptions$1(options);

      if (cpfArray.length !== CPF_LENGTH) {
        var error = new Error("Parameter \"" + cpfString + "\" does not contain " + CPF_LENGTH + " digits.");
        return customOptions.onFail(cpfString, error);
      }

      if (customOptions.hidden) {
        for (var i = customOptions.hiddenRange.start; i <= customOptions.hiddenRange.end; i++) {
          cpfArray[i] = customOptions.hiddenKey;
        }
      }

      cpfArray.splice(9, 0, customOptions.delimiters.dash); // eslint-disable-line no-magic-numbers

      cpfArray.splice(6, 0, customOptions.delimiters.dot); // eslint-disable-line no-magic-numbers

      cpfArray.splice(3, 0, customOptions.delimiters.dot); // eslint-disable-line no-magic-numbers

      var cpfPretty = cpfArray.join('');

      if (customOptions.escape) {
        return htmlEscaper.escape(cpfPretty);
      }

      return cpfPretty;
    }

    var index_cjs = cpfFmt;

    var defaultOptions = {
        format: false,
        prefix: '',
    };
    /**
     * Merge custom options to the default ones.
     */
    function mergeOptions(customOptions) {
        if (customOptions === void 0) { customOptions = {}; }
        return cjs(defaultOptions, customOptions);
    }

    /**
     * Generate an array of random numbers (as string) between 0 and  9.
     */
    function numberGenerator(length) {
        var numericSequence = [];
        while (numericSequence.length < length) {
            var random = Math.random() * 10;
            var integer = Math.floor(random);
            numericSequence.push(integer);
        }
        return numericSequence;
    }

    /**
     * Generate a valid CPF (Brazilian ID document) numeric sequence.
     */
    function cpfGen(options) {
        var userOptions = mergeOptions(options);
        var baseSequence = index_cjs$1(userOptions.prefix);
        var prefixLength = baseSequence.length;
        if (prefixLength < 0 || prefixLength > 9) {
            throw new Error('Option "prefix" must be a string containing between 1 and 9 digits.');
        }
        var cpfSequence = baseSequence
            .split('')
            .map(Number)
            .concat(numberGenerator(9 - prefixLength));
        [9, 10].forEach(function (nextNumIndex) {
            var factor = nextNumIndex + 1;
            var sum = 0;
            for (var n = 0; n < nextNumIndex; n++, factor--) {
                sum += cpfSequence[n] * factor;
            }
            var remainder = 11 - (sum % 11);
            cpfSequence.push(remainder > 9 ? 0 : remainder);
        });
        return userOptions.format
            ? index_cjs(cpfSequence.join(''))
            : cpfSequence.join('');
    }

    return cpfGen;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
