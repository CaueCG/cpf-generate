/**
 * LacusSoft :: cpf-fmt v1.1.0
 *
 * @author Julio L. Muller.
 * @license MIT - 2020-2021
 */

import numOnly from 'num-only';
import { escape } from 'html-escaper';
import mergeDeep from 'deepmerge';

var defaultOptions = {
    delimiters: {
        dot: '.',
        dash: '-',
    },
    hiddenRange: {
        start: 3,
        end: 10,
    },
    onFail: function (value) { return value; },
    hiddenKey: '*',
    hidden: false,
    escape: false,
};
/**
 * Merge custom options to the default ones.
 */
function mergeOptions(customOptions) {
    if (customOptions === void 0) { customOptions = {}; }
    var options = mergeDeep(defaultOptions, customOptions);
    if (options.hidden) {
        if (isNaN(options.hiddenRange.start)
            || options.hiddenRange.start < 0
            || options.hiddenRange.start > 10) {
            throw new TypeError('Option "hiddenRange.start" must be a number between 0 and 10.');
        }
        if (isNaN(options.hiddenRange.end)
            || options.hiddenRange.end < 0
            || options.hiddenRange.end > 10) {
            throw new TypeError('Option "hiddenRange.end" must be a number between 0 and 10.');
        }
        if (options.hiddenRange.start > options.hiddenRange.end) {
            var aux = options.hiddenRange.start;
            options.hiddenRange.start = options.hiddenRange.end;
            options.hiddenRange.end = aux;
        }
    }
    if (typeof options.onFail !== 'function') {
        throw new TypeError('The option "onFail" must be a callback function.');
    }
    return options;
}

/**
 * Validate a given CPF char sequence.
 */
function cpfFmt(cpfString, options) {
    var CPF_LENGTH = 11;
    var cpfArray = numOnly(cpfString).split('');
    var customOptions = mergeOptions(options);
    if (cpfArray.length !== CPF_LENGTH) {
        var error = new Error("Parameter \"" + cpfString + "\" does not contain " + CPF_LENGTH + " digits.");
        return customOptions.onFail(cpfString, error);
    }
    if (customOptions.hidden) {
        for (var i = customOptions.hiddenRange.start; i <= customOptions.hiddenRange.end; i++) {
            cpfArray[i] = customOptions.hiddenKey;
        }
    }
    cpfArray.splice(9, 0, customOptions.delimiters.dash); // eslint-disable-line no-magic-numbers
    cpfArray.splice(6, 0, customOptions.delimiters.dot); // eslint-disable-line no-magic-numbers
    cpfArray.splice(3, 0, customOptions.delimiters.dot); // eslint-disable-line no-magic-numbers
    var cpfPretty = cpfArray.join('');
    if (customOptions.escape) {
        return escape(cpfPretty);
    }
    return cpfPretty;
}

export default cpfFmt;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZXNtLmpzIiwic291cmNlcyI6W10sInNvdXJjZXNDb250ZW50IjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
